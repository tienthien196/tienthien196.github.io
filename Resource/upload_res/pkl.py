import json
from typing import Any, Dict, List

# ƒê∆∞·ªùng d·∫´n file
FILE_PATH = r"E:\DOCS\NoteBook\Resource\upload_res\data.json"

def load_data() -> Dict[str, List[Dict]]:
    """T·∫£i d·ªØ li·ªáu t·ª´ file JSON"""
    try:
        with open(FILE_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå File kh√¥ng t√¨m th·∫•y: {FILE_PATH}")
        exit(1)
    except json.JSONDecodeError as e:
        print(f"‚ùå L·ªói ƒë·ªãnh d·∫°ng JSON: {e}")
        exit(1)

def save_data(data: Dict[str, List[Dict]]) -> None:  # ‚Üê S·ª≠a ·ªü ƒë√¢y
    """L∆∞u d·ªØ li·ªáu ngay l·∫≠p t·ª©c v√†o file g·ªëc"""
    try:
        with open(FILE_PATH, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file: {e}")

def show_categories(categories: List[str]):
    """Hi·ªÉn th·ªã danh s√°ch category"""
    print("\nüìã Danh s√°ch c√°c topic (category):")
    for idx, cat in enumerate(categories, start=1):
        print(f"  {idx}. {cat}")

def get_user_choice(options: List[str], prompt: str) -> str:
    """Ch·ªçn t·ª´ danh s√°ch"""
    while True:
        try:
            choice = input(prompt).strip()
            if not choice:
                return ""
            idx = int(choice) - 1
            if 0 <= idx < len(options):
                return options[idx]
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë.")

def display_item(item: Dict[str, Any]):
    """Hi·ªÉn th·ªã th√¥ng tin item"""
    print("\n" + "-" * 50)
    print("üîπ ƒêang x·ª≠ l√Ω item:")
    for key, value in item.items():
        if key != "tags":
            print(f"  {key.capitalize()}: {value}")
    if "tags" in item:
        tags = item['tags']
        if isinstance(tags, list):
            tags_str = ', '.join(tags)
        else:
            tags_str = tags
        print(f"  Tags: {tags_str}")
    print("-" * 50)

def main():
    print("üîÑ ƒêang t·∫£i d·ªØ li·ªáu...")
    data = load_data()

    categories = list(data.keys())
    if not categories:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω.")
        return

    # Ch·ªçn category ngu·ªìn
    show_categories(categories)
    source_cat = get_user_choice(categories, f"\nNh·∫≠p s·ªë ƒë·ªÉ ch·ªçn category x·ª≠ l√Ω (1-{len(categories)}): ")
    if not source_cat:
        print("‚ùå Kh√¥ng ch·ªçn category. Tho√°t.")
        return

    items = data[source_cat]
    if not items:
        print(f"‚ö†Ô∏è  '{source_cat}' tr·ªëng. Kh√¥ng c√≥ g√¨ ƒë·ªÉ x·ª≠ l√Ω.")
        return

    print(f"\nüîç X·ª≠ l√Ω {len(items)} item trong '{source_cat}'...")

    # Duy·ªát t·ª´ng item
    for i, item in enumerate(items[:]):  # d√πng b·∫£n sao ƒë·ªÉ an to√†n
        display_item(item)
        print(f"\nüéØ Item {i+1}/{len(items)} t·ª´ '{source_cat}'")

        # ‚úÖ C·∫≠p nh·∫≠t danh s√°ch l·ª±a ch·ªçn M·ªñI L·∫¶N
        current_categories = list(data.keys())
        target_options = current_categories + ["[T·∫°o m·ªõi]", "[Gi·ªØ nguy√™n]", "[X√≥a]"]

        choice = get_user_choice(
            target_options,
            "Ch·ªçn h√†nh ƒë·ªông:\n" +
            "\n".join(f"  {i+1}. {opt}" for i, opt in enumerate(target_options)) +
            f"\nNh·∫≠p s·ªë (Enter ƒë·ªÉ gi·ªØ nguy√™n): "
        )

        if choice == "[Gi·ªØ nguy√™n]":
            continue
        elif choice == "[X√≥a]":
            data[source_cat].remove(item)
            save_data(data)
            print("üóëÔ∏è  ƒê√£ x√≥a item. ‚úÖ ƒê√£ c·∫≠p nh·∫≠t file.")
        elif choice == "[T·∫°o m·ªõi]":
            new_cat = input("üëâ Nh·∫≠p t√™n category m·ªõi: ").strip()
            if not new_cat:
                print("‚ùå T√™n kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n.")
                continue
            if new_cat not in data:
                data[new_cat] = []
                print(f"üÜï ƒê√£ t·∫°o category: '{new_cat}'")
            data[new_cat].append(item)
            data[source_cat].remove(item)
            save_data(data)
            print(f"‚úÖ ƒê√£ chuy·ªÉn ƒë·∫øn '{new_cat}'. ‚úÖ ƒê√£ c·∫≠p nh·∫≠t file.")
        elif choice in current_categories:
            data[choice].append(item)
            data[source_cat].remove(item)
            save_data(data)
            print(f"‚úÖ ƒê√£ chuy·ªÉn ƒë·∫øn '{choice}'. ‚úÖ ƒê√£ c·∫≠p nh·∫≠t file.")
        else:
            print("‚ö†Ô∏è  Kh√¥ng x·ª≠ l√Ω.")

        # Ki·ªÉm tra xem c√≥ x√≥a category ngu·ªìn n·∫øu r·ªóng
        if not data[source_cat]:
            confirm = input(f"\nüìå '{source_cat}' ƒë√£ r·ªóng. X√≥a category n√†y? (y/N): ").strip().lower()
            if confirm == 'y':
                del data[source_cat]
                save_data(data)
                print(f"üóëÔ∏è  ƒê√£ x√≥a category '{source_cat}'. ‚úÖ ƒê√£ c·∫≠p nh·∫≠t file.")

    print(f"\nüéâ Ho√†n t·∫•t! M·ªçi thay ƒë·ªïi ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ª±c ti·∫øp v√†o file.")
    print(f"üìÅ File: {FILE_PATH}")

if __name__ == "__main__":
    main()